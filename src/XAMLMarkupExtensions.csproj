<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>net35;net40;net452</TargetFrameworks>
    <AssemblyTitle>XAMLMarkupExtensions</AssemblyTitle>
    <AssemblyName>XAMLMarkupExtensions</AssemblyName>
    <RootNamespace>XAMLMarkupExtensions</RootNamespace>
    <Version>$(GitVersion_NuGetVersion)</Version>
    <GenerateAssemblyFileVersionAttribute>false</GenerateAssemblyFileVersionAttribute>
    <GenerateAssemblyInformationalVersionAttribute>false</GenerateAssemblyInformationalVersionAttribute>
    <GenerateAssemblyVersionAttribute>false</GenerateAssemblyVersionAttribute>

    <Company />
    <Product>XAML Markup Extensions</Product>    
    <Authors>Uwe Mayer,Konrad Mattheis,Bernhard Millauer</Authors>
    <RepositoryUrl>https://github.com/konne/XAMLMarkupExtensions.git</RepositoryUrl>
    <PackageLicenseUrl>https://raw.githubusercontent.com/konne/XAMLMarkupExtensions/master/LICENSE</PackageLicenseUrl>
    <PackageProjectUrl>https://github.com/konne/XAMLMarkupExtensions</PackageProjectUrl>
    <Copyright>Uwe Mayer, Konrad Mattheis, Bernhard Millauer</Copyright>
    <Description>A base class for nested markup extensions and a collection of useful extensions for WPF 3.5 and 4.x.</Description>
    <PackageRequireLicenseAcceptance>true</PackageRequireLicenseAcceptance>
    <PackageReleaseNotes></PackageReleaseNotes>
    <NeutralLanguage>en-US</NeutralLanguage>
    <PackageTags>WPF markup extension nesting</PackageTags>
    
    <GenerateDocumentationFile>true</GenerateDocumentationFile>        
  </PropertyGroup>

  <Choose>
    <When Condition="'$(Configuration)' == 'Release'">
      <PropertyGroup>
        <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <GeneratePackageOnBuild>false</GeneratePackageOnBuild>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <ItemGroup>
    <Reference Include="PresentationCore" />
    <Reference Include="PresentationFramework" />
    <Reference Include="System" />
    <Reference Include="System.Core" />
    <Reference Include="System.Drawing" />
    <Reference Include="System.Xml.Linq" />
    <Reference Include="System.Xml" />
    <Reference Include="WindowsBase" />
    
    <PackageReference Include="GitVersionTask" Version="4.0.0-beta0012">
      <PrivateAssets>All</PrivateAssets>
    </PackageReference>
  </ItemGroup>
    
  <ItemGroup Condition=" '$(TargetFramework)' != 'net35' ">
    <Reference Include="System.Xaml" />
  </ItemGroup>

  <Target Name="WriteVersion" AfterTargets="GetVersion" Condition="'$(PackageOutputAbsolutePath)' != ''">
    <WriteLinesToFile File="$(PackageOutputAbsolutePath)\version.txt" Lines="$(GitVersion_NuGetVersion)" Overwrite="true" />  
  </Target>
  
  <Target Name="SetPackageVersionFromFile" BeforeTargets="GenerateNuspec">
    <ReadLinesFromFile File="$(PackageOutputAbsolutePath)\version.txt">
      <Output TaskParameter="Lines" PropertyName="PackageVersion" />
    </ReadLinesFromFile>  
  </Target>

  <Target Name="PublishToNugetWithAPIKey" AfterTargets="GenerateNuspec" Condition="Exists('$(SolutionDir)\..\..\nugetapikey.txt')">
    <!--<ReadLinesFromFile File="$(SolutionDir)\..\..\nugetapikey.txt">
      <Output TaskParameter="Lines" PropertyName="NugetAPIKey" />
    </ReadLinesFromFile>-->    
    <Exec WorkingDirectory="$(BaseDir)" Command="dotnet nuget push $(PackageOutputAbsolutePath)$(PackageId).$(PackageVersion).nupkg -k $(NugetAPIKey) -s https://api.nuget.org/v3/index.json" />
  </Target>
</Project>